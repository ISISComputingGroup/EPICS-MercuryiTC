
# Initially auto-generated
# 

# 
# Definitions from configSection "frontpanel" in XML input file
#
#     lvDCOMConfigure("$(port)", "frontpanel", "/path/to/lvinput.xml")
# 
# MACROS for IOC
# P - base name of the IOC including IOC number and panel number
# IOC_NUM - the ioc's number sets the first panel number (e.g. Mercury - Front Panel $(IOC_NUM) - TEMP $(VI_TEMP_X)
# VI_TEMP_1 - the first temp panel number (usually 1 or blank for do not use)
# VI_TEMP_2 - the first temp panel number (usually 2 or blank for do not use)
# VI_TEMP_3 - the first temp panel number (usually 3 or blank for do not use)
# VI_TEMP_4 - the first temp panel number (usually 4 or blank for do not use)
      
## Creating both stringout/stringin and waveform records for "Name" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
## EPICS strings are restricted to 40 characters in length, if your strings are
## longer than this choose the character waveform records and adjust NELM if necessary

# Read LabVIEW control/indicator "Name" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(waveform, "$(P)NAME")
{
	field(DESC, "Name")
    field(DTYP, "asynOctetRead")
	field(FTVL, "CHAR")
	field(NELM, "256")
    field(INP,  "@asyn($(port),0,0)NAME")
    field(SCAN, ".1 second")
	info(INTEREST, "MEDIUM")
	info(archive, "VAL")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:NAME")
	field(SDIS, "$(P)DISABLE")
}
alias( "$(P)NAME",  "$(P)NAME:SP:RBV")

# Write to LabVIEW control "Name" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(waveform, "$(P)NAME:SP")
{
	field(DESC, "Set the name")
    field(DTYP, "asynOctetWrite")
	field(FTVL, "CHAR")
	field(NELM, "256")
	#NOTE: This does push the value to the real thing, with some asyn magic
	# but in SIM mode it doesn't push its value, it pulls it from the SIM:NAME instead
	# (as waveforms are really input records)
    field(INP,  "@asyn($(port),0,0)NAME")
	info(archive, "VAL")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:NAME:SP")
	field(SDIS, "$(P)DISABLE")
}

# Read LabVIEW control/indicator "Activity" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(bi, "$(P)ACTIVITY")
{
	field(DESC, "Activity")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(port),0,0)ACTIVITY")
    field(SCAN, ".1 second")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:ACTIVITY")
	field(SDIS, "$(P)DISABLE")
}

# Read LabVIEW control/indicator "Temperature" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(ai, "$(P)TEMP")
{
	field(DESC, "Temperature")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(port),0,0)TEMP")
    field(PREC, "3")
    field(SCAN, ".1 second")
	field(EGU, "K")
	info(INTEREST, "HIGH")
	info(archive, "VAL")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:TEMP")
	field(SDIS, "$(P)DISABLE")
}

# Read LabVIEW control/indicator "Temp Set Ind" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(ai, "$(P)TEMP:SP:RBV")
{
	field(DESC, "Temperature set point")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(port),0,0)TEMP:SP:RBV")
    field(PREC, "3")
    field(SCAN, ".1 second")
	field(EGU, "K")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:TEMP:SP:RBV")
	field(SDIS, "$(P)DISABLE")
}

# Write to LabVIEW control "Temp Set" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(ao, "$(P)TEMP:SP")
{
	field(DESC, "Temp Set Point")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(port),0,0)TEMP:SP")
    field(PREC, "3")
	field(EGU, "K")
	info(INTEREST, "HIGH")
	info(archive, "VAL")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:TEMP:SP")
	field(SDIS, "$(P)DISABLE")
}

# Read LabVIEW control/indicator "Resistance" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(ai, "$(P)RESISTANCE")
{
	field(DESC, "Resistance of the temperature sensor")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(port),0,0)RESISTANCE")
    field(PREC, "3")
    field(SCAN, ".1 second")
	field(EGU, "ohm")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:RESISTANCE")
	field(SDIS, "$(P)DISABLE")
}

# Read LabVIEW control/indicator "Iterations" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(ai, "$(P)ITERATIONS")
{
	field(DESC, "Iterations")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(port),0,0)ITERATIONS")
    field(PREC, "3")
    field(SCAN, ".1 second")
	field(EGU, "")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:ITERATIONS")
	field(SDIS, "$(P)DISABLE")
}

# Read LabVIEW control/indicator "PID Auto" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(bi, "$(P)PID:AUTO")
{
	field(DESC, "PID setting are automatic")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(port),0,0)PID:AUTO:SP")
    field(SCAN, ".1 second")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
	info(INTEREST, "HIGH")
	info(archive, "VAL")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:PID:AUTO")
	field(SDIS, "$(P)DISABLE")
}
alias("$(P)PID:AUTO", "$(P)PID:AUTO:SP:RBV")

# Read LabVIEW control/indicator "PID Auto" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(bo, "$(P)PID:AUTO:SP")
{
	field(DESC, "PID setting are automatic")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(port),0,0)PID:AUTO:SP")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
	info(archive, "VAL")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:PID:AUTO:SP")
	field(SDIS, "$(P)DISABLE")
}

# Read LabVIEW control/indicator "P Ind" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(ai, "$(P)P")
{
	field(DESC, "P for PID controller readback")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(port),0,0)P:SP:RBV")
    field(PREC, "3")
    field(SCAN, ".1 second")
	field(EGU, "")
	info(archive, "VAL")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:P")
	field(SDIS, "$(P)DISABLE")
}
alias("$(P)P", "$(P)P:SP:RBV")

# Write to LabVIEW control "P" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(ao, "$(P)P:SP")
{
	field(DESC, "P for PID controller")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(port),0,0)P:SP")
    field(PREC, "3")
	field(EGU, "")
	info(archive, "VAL")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:P:SP")
	field(SDIS, "$(P)DISABLE")
}

# Read LabVIEW control/indicator "I Ind" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(ai, "$(P)I")
{
	field(DESC, "I for PID controller readback")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(port),0,0)I:SP:RBV")
    field(PREC, "3")
    field(SCAN, ".1 second")
	field(EGU, "")
	info(archive, "VAL")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:I")
	field(SDIS, "$(P)DISABLE")
}
alias("$(P)I", "$(P)I:SP:RBV")

# Write to LabVIEW control "I" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(ao, "$(P)I:SP")
{
	field(DESC, "I for PID controller")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(port),0,0)I:SP")
    field(PREC, "3")
	field(EGU, "")
	info(archive, "VAL")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:I:SP")
	field(SDIS, "$(P)DISABLE")
}

# Read LabVIEW control/indicator "D Ind" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(ai, "$(P)D")
{
	field(DESC, "D for PID controller readback")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(port),0,0)D:SP:RBV")
    field(PREC, "3")
    field(SCAN, ".1 second")
	field(EGU, "")
	info(archive, "VAL")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:D")
	field(SDIS, "$(P)DISABLE")
}
alias("$(P)D", "$(P)D:SP:RBV")

# Write to LabVIEW control "D" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(ao, "$(P)D:SP")
{
	field(DESC, "D for PID controller")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(port),0,0)D:SP")
    field(PREC, "3")
	field(EGU, "")
	info(archive, "VAL")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:D:SP")
	field(SDIS, "$(P)DISABLE")
}

# Read LabVIEW control/indicator "Heat Ind %" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(ai, "$(P)HEATER")
{
	field(DESC, "Heater % set point readback")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(port),0,0)HEATER:SP:RBV")
    field(PREC, "3")
    field(SCAN, ".1 second")
	field(EGU, "%")
	info(archive, "VAL")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:HEATER")
	field(SDIS, "$(P)DISABLE")
}
alias("$(P)HEATER", "$(P)HEATER:SP:RBV")

# Write to LabVIEW control "Heat %" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(ao, "$(P)HEATER:SP")
{
	field(DESC, "Heater % set point")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(port),0,0)HEATER:SP")
    field(PREC, "3")
	field(EGU, "%")
	info(archive, "VAL")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:HEATER:SP")
	field(SDIS, "$(P)DISABLE")
}

# Write to LabVIEW control "Voltage Limit" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(ao, "$(P)HEATER:VOLT_LIMIT:SP")
{
	field(DESC, "Voltage Limit for the heater")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(port),0,0)HEATER:VOLT_LIMIT:SP")
    field(PREC, "3")
	field(EGU, "V")
	info(archive, "VAL")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:HEATER:VOLT_LIMIT:SP")
	field(SDIS, "$(P)DISABLE")
}

# Read LabVIEW control/indicator "" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(ai, "$(P)HEATER:VOLT_LIMIT")
{
	field(DESC, "Voltage Limit for the heater readback")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(port),0,0)HEATER:VOLT_LIMIT:SP:RBV")
    field(PREC, "3")
    field(SCAN, ".1 second")
	field(EGU, "V")
	info(archive, "VAL")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:HEATER:VOLT_LIMIT")
	field(SDIS, "$(P)DISABLE")
}
alias("$(P)HEATER:VOLT_LIMIT", "$(P)HEATER:VOLT_LIMIT:SP:RBV")

# Read LabVIEW control/indicator "Power" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(ai, "$(P)HEATER:POWER")
{
	field(DESC, "Power used by the heater")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(port),0,0)HEATER:POWER")
    field(PREC, "3")
    field(SCAN, ".1 second")
	field(EGU, "")
	info(INTEREST, "MEDIUM")
	info(archive, "VAL")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:HEATER:POWER")
	field(SDIS, "$(P)DISABLE")
}

# Read LabVIEW control/indicator "Voltage" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(ai, "$(P)HEATER:VOLT")
{
	field(DESC, "Voltage on the heater")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(port),0,0)HEATER:VOLT")
    field(PREC, "3")
    field(SCAN, ".1 second")
	field(EGU, "V")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:HEATER:VOLT")
	field(SDIS, "$(P)DISABLE")
}

# Read LabVIEW control/indicator "Current" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(ai, "$(P)HEATER:CURR")
{
	field(DESC, "Current on the heater")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(port),0,0)HEATER:CURR")
    field(PREC, "3")
    field(SCAN, ".1 second")
	field(EGU, "A")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:HEATER:CURR")
	field(SDIS, "$(P)DISABLE")
}

# Read LabVIEW control/indicator "Heater Control" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(mbbi, "$(P)HEATER:STAT:SP:RBV")
{
	field(DESC, "Heater Control readback")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(port),0,0)HEATER:STAT:SP")
    field(SCAN, ".1 second")

    field(ZRVL, "0")
    field(ZRST, "Automatic")
        
    field(ONVL, "1")
    field(ONST, "Manual")
	info(INTEREST, "HIGH")
	info(archive, "VAL")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:HEATER:STAT:SP:RBV")
	field(SDIS, "$(P)DISABLE")	
}

# Write to LabVIEW control "Heater Control" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(mbbo, "$(P)HEATER:STAT:SP")
{
	field(DESC, "Heater Control")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(port),0,0)HEATER:STAT:SP")

    field(ZRVL, "0")
    field(ZRST, "Automatic")
        
    field(ONVL, "1")
    field(ONST, "Manual")
	info(archive, "VAL")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:HEATER:STAT:SP PP")	
	field(SDIS, "$(P)DISABLE")
}

# Read LabVIEW control/indicator "Heater Auto" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(bi, "$(P)HEATER:STAT")
{
	field(DESC, "Heater control readback")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(port),0,0)HEATER:AUTO:SP:RBV")
    field(SCAN, ".1 second")
	# NOTE: Manual and Automatic are swapped with respect to the :SP. This is not a typo.
    field(ZNAM, "Manual")
    field(ONAM, "Automatic")
	info(INTEREST, "HIGH")
	info(archive, "VAL")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:HEATER:STAT")
	field(SDIS, "$(P)DISABLE")
}

# Read LabVIEW control/indicator "Flow Ind %" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(ai, "$(P)FLOW")
{
	field(DESC, "Gas flow % setpoint readback'")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(port),0,0)FLOW:SP:RBV")
    field(PREC, "3")
    field(SCAN, ".1 second")
	field(EGU, "%")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:FLOW")
	field(SDIS, "$(P)DISABLE")
}

# Write to LabVIEW control "Flow %" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(ao, "$(P)FLOW:SP")
{
	field(DESC, "Gas flow % setpoint")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(port),0,0)FLOW:SP")
    field(PREC, "3")
	field(EGU, "%")
	info(archive, "VAL")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:FLOW:SP")
	field(SDIS, "$(P)DISABLE")
}
alias("$(P)FLOW", "$(P)FLOW:SP:RBV")

# Read LabVIEW control/indicator "Flow Auto" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(bi, "$(P)FLOW:STAT")
{
	field(DESC, "Flow Auto")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(port),0,0)FLOW:AUTO:SP:RBV")
    field(SCAN, ".1 second")
	# NOTE: Manual and Automatic are swapped with respect to the :SP. This is not a typo.
    field(ZNAM, "Manual")
    field(ONAM, "Automatic")
	info(INTEREST, "HIGH")
	info(archive, "VAL")
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:FLOW:STAT")
	field(SDIS, "$(P)DISABLE")
}

# Read LabVIEW control/indicator "Gas Control" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(mbbi, "$(P)FLOW:STAT:SP:RBV")
{
	field(DESC, "Gas Flow Control Status readback")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(port),0,0)FLOW:STAT:SP")
    field(SCAN, ".1 second")

    field(ZRVL, "0")
    field(ZRST, "Automatic")

    field(ONVL, "1")
    field(ONST, "Manual")
    field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:FLOW:STAT:SP:RBV")
	field(SDIS, "$(P)DISABLE")
}

# Write to LabVIEW control "Gas Control" on "C:/LabVIEW Modules/Drivers/Oxford Instruments/Mercury/Mercury - Temperature.llb/Mercury - Front Panel 1 - Temp 1.vi"
record(mbbo, "$(P)FLOW:STAT:SP")
{
	field(DESC, "Gas Flow Control Status")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(port),0,0)FLOW:STAT:SP")

    field(ZRVL, "0")
    field(ZRST, "Automatic")
        
    field(ONVL, "1")
    field(ONST, "Manual")
    info(archive, "VAL")    
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:FLOW:STAT:SP PP")
	field(SDIS, "$(P)DISABLE")
}

####################
## DISABLE RECORD ##
####################

record(bo, "$(P)DISABLE") 
{
	field(DESC, "Disable comms")
	field(PINI, "YES")
	field(VAL, "0")
	field(OMSL, "supervisory")
	field(ZNAM, "COMMS ENABLED")
	field(ONAM, "COMMS DISABLED")
}

########################
## SIMULATION RECORDS ##
########################

record(bo, "$(P)SIM")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
    field(ZNAM, "NO")
    field(ONAM, "YES")
}

record(waveform, "$(P)SIM:NAME")
{
	field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
	field(FTVL, "CHAR")
	field(NELM, "256")
}
alias("$(P)SIM:NAME", "$(P)SIM:NAME:SP")
alias("$(P)SIM:NAME", "$(P)SIM:NAME:SP:RBV")

record(bo, "$(P)SIM:ACTIVITY")
{
	field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
	field(ZNAM, "OFF")
    field(ONAM, "ON")
}

record(ao, "$(P)SIM:TEMP")
{
	field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}
alias("$(P)SIM:TEMP", "$(P)SIM:TEMP:SP")
alias("$(P)SIM:TEMP", "$(P)SIM:TEMP:SP:RBV")

record(ao, "$(P)SIM:RESISTANCE")
{
	field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(ao, "$(P)SIM:ITERATIONS")
{
	field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(bo, "$(P)SIM:PID:AUTO")
{
	field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
	field(ZNAM, "OFF")
    field(ONAM, "ON")
}
alias("$(P)SIM:PID:AUTO", "$(P)SIM:PID:AUTO:SP")
alias("$(P)SIM:PID:AUTO", "$(P)SIM:PID:AUTO:SP:RBV")

record(ao, "$(P)SIM:P")
{
	field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}
alias("$(P)SIM:P", "$(P)SIM:P:SP")
alias("$(P)SIM:P", "$(P)SIM:P:SP:RBV")

record(ao, "$(P)SIM:I")
{
	field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}
alias("$(P)SIM:I", "$(P)SIM:I:SP")
alias("$(P)SIM:I", "$(P)SIM:I:SP:RBV")

record(ao, "$(P)SIM:D")
{
	field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}
alias("$(P)SIM:D", "$(P)SIM:D:SP")
alias("$(P)SIM:D", "$(P)SIM:D:SP:RBV")

record(ao, "$(P)SIM:HEATER")
{
	field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}
alias("$(P)SIM:HEATER", "$(P)SIM:HEATER:SP")
alias("$(P)SIM:HEATER", "$(P)SIM:HEATER:SP:RBV")

record(ao, "$(P)SIM:HEATER:VOLT_LIMIT")
{
	field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}
alias("$(P)SIM:HEATER:VOLT_LIMIT", "$(P)SIM:HEATER:VOLT_LIMIT:SP")
alias("$(P)SIM:HEATER:VOLT_LIMIT", "$(P)SIM:HEATER:VOLT_LIMIT:SP:RBV")

record(ao, "$(P)SIM:HEATER:POWER")
{
	field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(ao, "$(P)SIM:HEATER:VOLT")
{
	field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(ao, "$(P)SIM:HEATER:CURR")
{
	field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(bo, "$(P)SIM:HEATER:STAT")
{
	field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
	field(ZNAM, "Manual")
    field(ONAM, "Automatic")
}

record(bo, "$(P)SIM:HEATER:STAT:SP")
{
	field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
	field(ZNAM, "Automatic")
    field(ONAM, "Manual")
	field(OUT, "$(P)SIM:HEATER:STAT:CALC.A PP")
}
alias("$(P)SIM:HEATER:STAT:SP", "$(P)SIM:HEATER:STAT:SP:RBV")

record(calcout, "$(P)SIM:HEATER:STAT:CALC")
{
	field(CALC, "!A")
	field(OUT, "$(P)SIM:HEATER:STAT PP")
}

record(ao, "$(P)SIM:FLOW")
{
	field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}
alias("$(P)SIM:FLOW", "$(P)SIM:FLOW:SP")
alias("$(P)SIM:FLOW", "$(P)SIM:FLOW:SP:RBV")

record(bo, "$(P)SIM:FLOW:STAT")
{
	field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
	field(ZNAM, "Manual")
    field(ONAM, "Automatic")
}

record(bo, "$(P)SIM:FLOW:STAT:SP")
{
	field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
	field(ZNAM, "Automatic")
    field(ONAM, "Manual")
	field(OUT, "$(P)SIM:FLOW:STAT:CALC.A PP")
}
alias("$(P)SIM:FLOW:STAT:SP", "$(P)SIM:FLOW:STAT:SP:RBV")

record(calcout, "$(P)SIM:FLOW:STAT:CALC")
{
	field(CALC, "!A")
	field(OUT, "$(P)SIM:FLOW:STAT PP")
}
